{
  "Repository文件代码": {
    "prefix": "repository_default",
    "body": [
      "import { ref } from 'vue';\r",
      "import {\r",
      "  createXXX,\r",
      "  updateXXX,\r",
      "  getXXXSelect,\r",
      "  getXXXPage,\r",
      "  exportXXX,\r",
      "  getXXXById,\r",
      "  deleteXXXById,\r",
      "  displayXXX,\r",
      "  exchangeXXX\r",
      "} from '/@/api/';\r",
      "import { ElMessageBox, ElMessage } from 'element-plus';\r",
      "import { useI18n } from 'vue-i18n'\r",
      "\r",
      "export default function useXXXRepository() {\r",
      "  const { t } = useI18n()\r",
      "  const formData = ref({})\r",
      "\r",
      "  // 重置表单\r",
      "  const formPageResetHandle = (callback: any) => {\r",
      "    formData.value = {}\r",
      "    callback && callback()\r",
      "  }\r",
      "\r",
      "  // 创建\r",
      "  const createXXXHandle = (params: any) => {\r",
      "    return new Promise((resolve, reject) => {\r",
      "      createXXX(params).then((response: any) => {\r",
      "        return resolve(response)\r",
      "      });\r",
      "    })\r",
      "  }\r",
      "\r",
      "  // 修改\r",
      "  const updateXXXHandle = (params: any) => {\r",
      "    return new Promise((resolve, reject) => {\r",
      "      updateXXX(params).then((response: any) => {\r",
      "        return resolve(response)\r",
      "      });\r",
      "    })\r",
      "  }\r",
      "\r",
      "  // 获取列表数据\r",
      "  const getXXXSelectHandle = (params: any) => {\r",
      "    return new Promise((resolve, reject) => {\r",
      "      getXXXSelect(params).then((response: any) => {\r",
      "        resolve(response)\r",
      "      });\r",
      "    })\r",
      "  }\r",
      "\r",
      "  // 获取分页数据\r",
      "  const getPageHandle = (params: any) => {\r",
      "    return new Promise((resolve, reject) => {\r",
      "      getXXXPage(params).then((response: any) => {\r",
      "        resolve(response)\r",
      "      });\r",
      "    })\r",
      "  }\r",
      "\r",
      "  // 导出\r",
      "  const exportHandle = (params: any) => {\r",
      "    exportXXX(params)\r",
      "  }\r",
      "\r",
      "  // 根据id获取数据\r",
      "  const getXXXByIdHandle = (params: any, callback: any) => {\r",
      "    return new Promise((resolve, reject) => {\r",
      "      getXXXById(params).then((response: any) => {\r",
      "        formData.value = response\r",
      "        callback && callback()\r",
      "        resolve(response)\r",
      "      });\r",
      "    })\r",
      "  }\r",
      "\r",
      "  // 上传\r",
      "  const uploadXXXHandle = (params: any) => {\r",
      "    return new Promise((resolve, reject) => {\r",
      "      uploadXXX(params).then((response: any) => {\r",
      "        resolve(response)\r",
      "      });\r",
      "    })\r",
      "  }\r",
      "\r",
      "  // 删除\r",
      "  const deleteXXXByIdHandle = (params: any, callback: any) => {\r",
      "    ElMessageBox.confirm(t('table.deleteTipMessage'), t('table.deleteTipName'), {\r",
      "      confirmButtonText: t('table.sure'),\r",
      "      cancelButtonText: t('table.cancel'),\r",
      "      type: 'warning',\r",
      "    })\r",
      "      .then(() => {\r",
      "        deleteXXXById(params).then(() => {\r",
      "          ElMessage({\r",
      "            type: 'success',\r",
      "            message: t('table.deleteSuccessMessage'),\r",
      "          });\r",
      "          callback && callback()\r",
      "        });\r",
      "      })\r",
      "      .catch(() => {\r",
      "      });\r",
      "  }\r",
      "\r",
      "  // 删除多个\r",
      "  const deleteXXXByIdsHandle = (params: any, callback: any) => {\r",
      "    const len = params.length\r",
      "    if (!len) {\r",
      "      return false\r",
      "    }\r",
      "    ElMessageBox.confirm(t('table.deleteTipWithMessage', { message: len }), t('table.deleteTipName'), {\r",
      "      confirmButtonText: t('table.sure'),\r",
      "      cancelButtonText: t('table.cancel'),\r",
      "      type: 'warning',\r",
      "    })\r",
      "      .then(() => {\r",
      "        deleteXXXByIds(params).then(() => {\r",
      "          ElMessage({\r",
      "            type: 'success',\r",
      "            message: t('table.deleteSuccessMessage'),\r",
      "          });\r",
      "          callback && callback()\r",
      "        });\r",
      "      })\r",
      "      .catch(() => {\r",
      "      });\r",
      "  }\r",
      "\r",
      "  // 上/下架\r",
      "  const displayXXXHandle = (params: any, callback: any) => {\r",
      "    const { isdisplay } = params\r",
      "    ElMessageBox.confirm(isdisplay === 1 ? t('table.onTipMessage') : t('table.offTipMessage'), t('table.deleteTipName'), {\r",
      "      confirmButtonText: t('table.sure'),\r",
      "      cancelButtonText: t('table.cancel'),\r",
      "      type: 'warning',\r",
      "    })\r",
      "      .then(() => {\r",
      "        displayXXX(params).then(() => {\r",
      "          ElMessage({\r",
      "            type: 'success',\r",
      "            message: t('table.actionSuccessMessage'),\r",
      "          });\r",
      "          callback && callback()\r",
      "        });\r",
      "      })\r",
      "      .catch(() => {\r",
      "      });\r",
      "  }\r",
      "\r",
      "  // 显示次序更替\r",
      "  const exchangeXXXHandle = (params: any, callback: any) => {\r",
      "    return new Promise((resolve, reject) => {\r",
      "      exchangeXXX(params).then((response: any) => {\r",
      "        callback && callback()\r",
      "        return resolve(response)\r",
      "      });\r",
      "    })\r",
      "  }\r",
      "\r",
      "const getXXXHandle = (params: any) => {\r",
      "  return new Promise((resolve, reject) => {\r",
      "    getXXX(params).then((response: any) => {\r",
      "      XXX.value = response\r",
      "      resolve(response)\r",
      "    });\r",
      "  })\r",
      "}\r",
      "\r",
      "  return {\r",
      "    formData,\r",
      "    formPageResetHandle,\r",
      "    createXXXHandle,\r",
      "    updateXXXHandle,\r",
      "    getXXXSelectHandle,\r",
      "    getPageHandle,\r",
      "    exportHandle,\r",
      "    getXXXByIdHandle,\r",
      "    deleteXXXByIdHandle,\r",
      "    deleteXXXByIdsHandle,\r",
      "    displayXXXHandle,\r",
      "    exchangeXXXHandle,\r",
      "  }\r",
      "}\r",
      "\r"
    ],
    "description": "Repository文件代码"
  }
}
