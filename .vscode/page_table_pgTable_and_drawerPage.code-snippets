{
  "table页面_pgTable_and_drawerPage_基础代码": {
    "prefix": "page_table_pgTable_and_drawerPage",
    "body": [
      "<template>\r",
      "  <el-row :gutter=\"StyleEnum.ROW_GUTTER\">\r",
      "    <el-col :xs=\"StyleEnum.COL_XS\" :sm=\"StyleEnum.COL_SM\" :md=\"24\" :lg=\"24\" :xl=\"24\">\r",
      "      <PgTable\r",
      "        :table-method=\"getPageHandle\"\r",
      "        :table-params=\"tableParams\"\r",
      "        ref=\"pgTable\"\r",
      "        :selection=\"true\"\r",
      "        @selection-change=\"handleSelectionChangeHandle\"\r",
      "      >\r",
      "        <template v-slot:search>\r",
      "          <el-form ref=\"searchForm\" :model=\"tableParams\" label-position=\"left\"  @keydown.enter.native=\"pgTableQuery(tableParams)\">\r",
      "            <el-row :gutter=\"StyleEnum.ROW_GUTTER\">\r",
      "              ??$1\r",
      "            </el-row>\r",
      "          </el-form>\r",
      "        </template>\r",
      "        <template v-slot:button>\r",
      "          <el-row :gutter=\"StyleEnum.ROW_GUTTER\">\r",
      "            <el-col :xs=\"StyleEnum.COL_XS\" :sm=\"StyleEnum.COL_SM\" :md=\"24\" :lg=\"24\" :xl=\"24\">\r",
      "              <el-button\r",
      "                type=\"primary\"\r",
      "                v-if=\"filterPermission('xxx:xxx:view')\"\r",
      "                :size=\"StyleEnum.BUTTON_SIZE\"\r",
      "                @click=\"pgTableQuery(tableParams)\"\r",
      "              >\r",
      "                {{ $$t('table.search') }}\r",
      "              </el-button>\r",
      "              <el-button\r",
      "                type=\"primary\"\r",
      "                v-if=\"filterPermission('xxx:xxx:save')\"\r",
      "                :size=\"StyleEnum.BUTTON_SIZE\"\r",
      "                @click=\"createHandle\"\r",
      "              >\r",
      "                {{ $$t('table.create') }}\r",
      "              </el-button>\r",
      "              <el-button :size=\"StyleEnum.BUTTON_SIZE\" @click=\"pgTableResetHandle\">\r",
      "                {{ $$t('table.reset') }}\r",
      "              </el-button>\r",
      "            </el-col>\r",
      "          </el-row>\r",
      "        </template>\r",
      "        <template v-slot:content>\r",
      "          $2??\r",
      "\r",
      "          <el-table-column :show-overflow-tooltip=\"true\" :label=\"$$t('table.handle')\" width=\"60\">\r",
      "            <template #default=\"scope\">\r",
      "              <el-button\r",
      "                type=\"text\"\r",
      "                v-if=\"filterPermission('xxx:xxx:update')\"\r",
      "                :size=\"StyleEnum.BUTTON_SIZE\"\r",
      "                @click=\"updateHandle({ id: scope.row.id })\"\r",
      "              >\r",
      "                {{ $$t('table.update') }}\r",
      "              </el-button>\r",
      "              <el-button\r",
      "                type=\"text\"\r",
      "                v-if=\"filterPermission('xxx:xxx:delete')\"\r",
      "                :size=\"StyleEnum.BUTTON_SIZE\"\r",
      "                @click=\"deleteHandle([scope.row.id])\"\r",
      "              >\r",
      "                {{ $$t('table.delete') }}\r",
      "              </el-button>\r",
      "            </template>\r",
      "          </el-table-column>\r",
      "        </template>\r",
      "      </PgTable>\r",
      "    </el-col>\r",
      "  </el-row>\r",
      "  <DrawerPage ref=\"drawerPage\" @before-close=\"handleClose\" :with-header=\"true\" :title=\"$$t('XXX.bbb')\">\r",
      "    <template v-slot:content>\r",
      "      <XXXConfig $3?? @before-close=\"handleClose\" />\r",
      "    </template>\r",
      "  </DrawerPage>\r",
      "</template>\r",
      "<script lang='ts'>\r",
      "// 基础支持\r",
      "import { defineComponent, ref, reactive } from 'vue'\r",
      "import { mapGetters } from 'vuex'\r",
      "import { StyleEnum } from '/@/enums/styleEnum'\r",
      "// components\r",
      "import { PgTable } from '/@/components/PgTable'\r",
      "import { UploadFileButton } from '/@/components/UploadFileButton'\r",
      "import { PopoverImage } from '/@/components/PopoverImage'\r",
      "import { DrawerPage } from '/@/components/DrawerPage'\r",
      "// directive\r",
      "import { Clipboard } from '/@/directive/clipboard'\r",
      "// hooks\r",
      "import usePgTableComponent from '/@/hooks/component/pgTable'\r",
      "import useDrawerPageComponent from '/@/hooks/component/drawerPage'\r",
      "// API封装\r",
      "// import useXXXRepository from './useXXXRepository' // 模板修改标记\r",
      "// mixin\r",
      "import tableMixin from '/@/mixins/tableMixin'\r",
      "// 页面\r",
      "// import XXXConfig from './config.vue' // 模板修改标记\r",
      "export default defineComponent({\r",
      "  name: 'XXX', // 模板修改标记\r",
      "  mixins: [tableMixin],\r",
      "  directives: {\r",
      "    Clipboard\r",
      "  },\r",
      "  components: { \r",
      "    PgTable, \r",
      "    UploadFileButton, \r",
      "    PopoverImage, \r",
      "    DrawerPage, \r",
      "    XXXConfig // 模板修改标记\r",
      "  }, // 模板修改标记\r",
      "  computed: {\r",
      "    ...mapGetters('permission', ['filterPermission']),\r",
      "    ...mapGetters('dict', ['getDictByType', 'getDictNameByValue'])\r",
      "  },\r",
      "  setup(props) {\r",
      "    // 约定，在页面直接使用的方法都以Handle结尾，子组件中的方法不以Handle作为结尾\r",
      "\r",
      "    // pgTable相关代码\r",
      "    const pgTable = ref(null)\r",
      "    const { pgTableSelections, pgTableQuery, pgTableReset, handleSelectionChange, clearSelection } = usePgTableComponent(pgTable)\r",
      "\r",
      "    // 查询条件\r",
      "    const searchForm = ref(null)\r",
      "    const tableParams = reactive({\r",
      "      // 模板修改标记\r",
      "    })\r",
      "\r",
      "    // 重置方法\r",
      "    function pgTableResetHandle() {\r",
      "      searchForm.value.resetFields()\r",
      "      clearSelection()\r",
      "      pgTableReset()\r",
      "    }\r",
      "\r",
      "    // API相关\r",
      "    // const { getPageHandle, deleteXXXByIdHandle } = useXXXRepository() // 模板修改标记\r",
      "\r",
      "    // 过滤数据\r",
      "    function handleSelectionChangeHandle(items: any[]) {\r",
      "      handleSelectionChange(items, 'id')\r",
      "    }\r",
      "\r",
      "    // 批量删除\r",
      "    function deleteHandle(params: any) {\r",
      "      deleteXXXByIdHandle(params, () => {\r",
      "        // 模板修改标记\r",
      "        clearSelection()\r",
      "        pgTableQuery(tableParams)\r",
      "      })\r",
      "    }\r",
      "\r",
      "    // 上传成功回调\r",
      "    function uploadSuccessHandle() {\r",
      "      clearSelection()\r",
      "      pgTableReset()\r",
      "    }\r",
      "\r",
      "    // 查询框初始化数据相关代码\r",
      "    // 模板修改标记 是否有初始化数据\r",
      "\r",
      "    //drawerPage相关代码开始\r",
      "    const drawerPage = ref(null)\r",
      "    const { showDrawer, hideDrawer } = useDrawerPageComponent(drawerPage)\r",
      "\r",
      "    // 关闭回调\r",
      "    function handleClose() {\r",
      "      hideDrawer()\r",
      "      clearSelection()\r",
      "    }\r",
      "\r",
      "    // showDrawer\r",
      "    function openHandle() {\r",
      "      showDrawer()\r",
      "      clearSelection()\r",
      "    }\r",
      "\r",
      "    return {\r",
      "      // 基础支持\r",
      "      StyleEnum,\r",
      "      // pgTable组件相关\r",
      "      pgTable,\r",
      "      pgTableSelections,\r",
      "      pgTableQuery,\r",
      "      handleSelectionChangeHandle,\r",
      "      // 查询form区域\r",
      "      searchForm,\r",
      "      tableParams,\r",
      "      pgTableResetHandle,\r",
      "      // drawerPage相关代码开始\r",
      "      drawerPage,\r",
      "      handleClose,\r",
      "      // 查询相关基础数据及方法\r",
      "      // API\r",
      "      getPageHandle, // 模板修改标记 获取分页数据\r",
      "      deleteHandle,\r",
      "      openHandle,\r",
      "      uploadSuccessHandle\r",
      "    }\r",
      "  }\r",
      "})\r",
      "</script>\r",
      ""
    ],
    "description": "table页面_pgTable_and_drawerPage_基础代码"
  }
}
